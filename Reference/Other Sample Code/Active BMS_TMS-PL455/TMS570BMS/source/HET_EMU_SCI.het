TX1_PIN     .equ    0                           ; HET0 is used for UART1 TX
RX1_PIN     .equ    2                           ; HET2 is used for UART1 RX
DUMMY_PIN   .equ    25                          ; Dummy pin for SHFT instruction
MAX_COUNT   .equ    4						; (Number + 1) of LRP for sending a bit
ZERO_COUNT	 .equ	    1						; (Number + 1) of LRP for detecting as zero (3 originally)
START_REMAIN .equ   2						; (Number + 1)of LRP for the remaining of start bit
BIT_START    .equ   1						; start LRP for sampling the bit
BIT_END    .equ   3						; End LRP for sampling the bit, 3 middle LRPs are chosen.


;;12 = 13-1; 13 = 96MHz (VCLK2) / 64 (LRPFC) / 115.2K (UART bps)
;4 = 5-1; 5 = 80MHz (VCLK2) / 64 (LRPFC) / 250K (UART bps)
SCITX    CNT     { next= Lm10,  reg = T, max= MAX_COUNT, irq = OFF,data=0}
Lm10     BR      { next= SCIRX, cond_addr= Lm11, event = ZERO}
;Every (MAX_COUNT+1) LRP, send out one bit
;DJZ checks if any active bits needs to send out
Lm11   DJZ { next=SendOverINT,cond_addr=SCIRX,reg=A,irq=OFF,data=0}; set to number of bit to transfer
;CNT is used to generate the interrupt when sending is done
SendOverINT   CNT { reg=A,irq=ON,max=9,data=0};
;SHFT out the data to the TX1_PIN
Lm12   SHFT { next=SCIRX,smode=OR0,prv=OFF,cond_addr=SCIRX,cond=UNC,pin=TX1_PIN,reg=A,irq=OFF,data=0x0};
 
;send start bit
;Check if it is state 0 - wait for start bit.
SCIRX 	SUB   {src1 = REM, src2 = IMM, dest=A, remote = CurrSTAT, data=0, hr_data=0}
Stat0BR	 	BR    {next = Check_Stat1, cond_addr= State0,event=ZERO}
;if RX1_PIN is low, a potential start bit, then +1 ‘the Number of zero’ 
State0   BR { next=ClrStCNT,cond_addr=ZeroCNT,pin=RX1_PIN,event=LOW};
;if RX1_PIN is not low, it is noise, clear ‘the Number of zero’
ClrStCNT   MOV32 { next=SCITX,remote=ZeroCNT,type=IMTOREG&REM,reg=A,data=0};
;This counter records ‘the Number of zero’ (start bit)
ZeroCNT     CNT {reg = B, max= ZERO_COUNT, irq = OFF,data=0}
;after receiving (ZERO_COUNT+1) zeros, go to state1
Wait_Stat0 	BR    {next = SCITX, cond_addr= CurrSTAT,event=ZERO} 

; Check if it is state 1 – Time for remaining start bits
Check_Stat1 SUB   {src1 = REM, src2 = IMM, dest=A, remote = CurrSTAT, data=1, hr_data=0}
Stat1BR	 	BR    {next = Check_Stat2, cond_addr= State1,event=ZERO}
;; The total number of remaining start bits = 13 – 4 = 9, so, set the max = 8.
; The total number of remaining start bits = MAX_COUNT - ZERO_COUNT = START_REMAIN +1.

State1	 	CNT     {reg = B, max= START_REMAIN, irq = OFF,data=0}
;waiting for another 9 zeros, go to state2
Wait_Stat1 	BR    {next = SCITX, cond_addr= CurrSTAT,event=ZERO} 

; Check if it is state 2 – Receive the 8 data bits and one stop bit		
Check_Stat2 	SUB   {src1 = REM, src2 = IMM, dest=A, remote = CurrSTAT, data=2, hr_data=0}
Stat2BR	 	BR    {next = CurrSTAT, cond_addr= State2,event=ZERO}
; A counter records the 13 time slots in one bit
; A counter records the (MAX_COUNT+1) time slots in one bit
State2	 	CNT     { reg = A, max= MAX_COUNT, irq = OFF,data=0}
;; Check if it is the 13rd time slot – the bit time is over.
; Check if it is the (MAX_COUNT+1)th time slot – the bit time is over.
Bit13Q BR    {next = Bit5Q, cond_addr= Bit13A,event=ZERO}
; If it is the 13rd time slot, check the bit received using majority vote.
;; Bit12A records the number of 1s during slot 5, 6 and 7.
; Bit12A records the number of 1s during slots during BIT_START and BIT_END LRP.
Bit13A AND   {src1 = REM, src2 = IMM, dest=A, remote = NumBit1, data=2, hr_data=0} ;majority vote 1 or 0
;Please notice that, here we shift in the zero flag, which is reverse of the bit received. Bit1RecQ records the ~of UART bits received.
Bit1RecQ   SHFT { smode=ORZ,cond=UNC,pin=DUMMY_PIN,reg=B,data=0};
;Clear the number of 1s counter, prepare for next bit.
ClearNumBit   MOV32 { remote=NumBit1,type=IMTOREG&REM,reg=A,data=0,hr_data=0};done with one bit

;A counter records the bits received, total 8 data bits + 1 stop bit
NumOfBits   CNT { reg=A,irq=OFF,max=8,data=0};
;if zero flag is set, all 9 bits have been received.
DoneRec   BR { next=SCITX,cond_addr=CopyRem0,event=ZERO,irq=ON};
;Take the ~ (using xor) of the data saved in Bit1RecQ, LSR 23 to get the data.
CopyRem0   XOR { src1=REM,src2=IMM,dest=T,remote=Bit1RecQ,smode=LSR,scount=23,data=0x0FFFFFF,hr_data=0x7F};
;save received data here
CopyRem1   AND{src1 = T, src2 = ONES, dest=IMM,data=0, hr_data=0}
;Receiving is done, mov to state 0 – wait for new data
MovStat0   MOV32 { next=SCITX,remote=CurrSTAT,type=IMTOREG&REM,reg=A,data=0};

; The next 3 sentences check the time slot is in [5 7]
; The next 3 sentences check the time slot is in [BIT_START BIT_END]
Bit5Q SUB   {src1 = REM, src2 = IMM, dest=A, remote = State2, data=BIT_START , hr_data=0}
Bit5A   BR { next=Bit7Q,cond_addr=SCITX,event=N};
Bit7Q SUB   {src1 = REM, src2 = IMM, dest=A, remote = State2, data=BIT_END, hr_data=0}
Bit7A   BR { next=SCITX,cond_addr=Bit5to7,event=ZN};
;;if it is time slot [5 7], and it is one, + 1 to the NumBit1 
;if it is time slot [BIT_START BIT_END], and it is one, + 1 to the NumBit1 
Bit5to7   BR { next=SCITX,cond_addr=NumBit1,pin=RX1_PIN,event=HIGH};
; ’+ 1’
NumBit1   CNT { next=SCITX, reg=A,max=0x8,data=0};

;Record the current status 0, 1 or 2.
CurrSTAT 	CNT  { next= SCITX,  reg = B, max= 0x1ffff, irq = OFF,data=0}

